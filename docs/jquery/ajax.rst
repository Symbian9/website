Функции поддержки архитектуры Ajax
==================================

.. js:function:: jQuery.ajax(options)
    
    Слож­ная, но са­мая уни­вер­саль­ная функ­ция под­держ­ки ар­хи­тек­ту­ры Ajax, на ко­то­рой ос­но­ва­ны все Ajax-ути­ли­ты в биб­лио­те­ке jQuery. Она при­ни­ма­ет един­ст­вен­ный объ­ект в ви­де ар­гу­мен­та, свой­ст­ва ко­то­ро­го оп­ре­де­ля­ют все тон­ко­сти, ка­саю­щие­ся от­прав­ки за­про­са и об­ра­бот­ки от­ве­та сер­ве­ра. 

    Параметры запроса

    * `url` - путь обращения

    * `dataType` - тип загружаемых данных

    * `success` - обработчик успешной обработки, f(data, textStatus)

    .. code-block:: js

        $.ajax({
            url: 'serverscript.php,
            dataType : "html",
            success: function (data, textStatus) {
                ...
            }
        });


.. js:function:: jQuery.ajaxSetup(options)
    
    Ус­та­нав­ли­ва­ет ука­зан­ные па­ра­мет­ры как зна­че­ния по умол­ча­нию. При­ни­ма­ет тот же объ­ект options, ка­кой пе­ре­да­ет­ся функ­ции jQuery.ajax(). Ука­зан­ные ва­ми зна­че­ния бу­дут ис­поль­зо­вать­ся все­ми по­сле­дую­щи­ми за­про­са­ми, при оформ­ле­нии ко­то­рых не бу­дут яв­но ука­за­ны дру­гие зна­че­ния па­ра­мет­ров. Эта функ­ция не име­ет воз­вра­щае­мо­го зна­че­ния.

    .. code-block:: js
       
        $.ajaxSetup({
            url: "serverscript.php",
            global: true,
            type: "POST"
        });


.. js:function:: jQuery.getJSON(url, [data], [f(object,status)])
    
    От­прав­ля­ет асин­хрон­ный за­прос по ад­ре­су url, до­бав­ляя лю­бые дан­ные data. Вы­ пол­ня­ет син­так­си­че­ский ана­лиз по­лу­чен­но­го от­ве­та как стро­ки в фор­ма­те JSON и пе­ре­да­ет по­лу­чив­ший­ся объ­ект функ­ции об­рат­но­го вы­зо­ва f. Воз­вра­ща­ет объ­ект XMLHttpRequest, ес­ли та­ко­вой име­ет­ся, ис­поль­зо­вав­ший­ся для вы­пол­не­ния за­про­са.


.. js:function:: jQuery.getScript(url, [f(text,status)])
    
    От­прав­ля­ет асин­хрон­ный за­прос по ад­ре­су url. При по­лу­че­нии от­ве­та вы­пол­ня­ет его как сце­на­рий, а  за­тем пе­ре­да­ет текст от­ве­та функ­ции f. Воз­вра­ща­ет объ­ект XMLHttpRequest, ес­ли та­ко­вой име­ет­ся, ис­поль­зо­вав­ший­ся для вы­пол­не­ния за­про­са. По­зво­ля­ет вы­пол­нять меж­до­мен­ные за­про­сы, но в  этом слу­чае не пе­ре­да­ет текст сце­на­рия функ­ции f и не воз­вра­ща­ет объ­ект XMLHttpRequest.


.. js:function:: jQuery.get(url [,data [,f(data,status,xhr) [,type]]])
    
    От­прав­ля­ет асин­хрон­ный HTTP GET-за­прос по ад­ре­су url, до­бав­ляя дан­ные data, ес­ли ука­за­ны, в стро­ку па­ра­мет­ров за­про­са дан­но­го URL-ад­ре­са. При по­лу­че­нии от­ве­та ин­тер­пре­ти­ру­ет его как дан­ные ти­па type или в со­от­вет­ст­вии со зна­че­ни­ем за­го­лов­ка Content-Type от­ве­та и вы­пол­ня­ет его или вы­пол­ня­ет син­так­си­че­ский ана­лиз, ес­ли это не­об­хо­ди­мо. В за­клю­че­ние пе­ре­да­ет (воз­мож­но, в ра­зо­бран­ном ви­де) дан­ные от­ве­та функ­ции об­рат­но­го вы­зо­ва f вме­сте с ко­дом со­стоя­ния и объ­ек­том XML­Http­Request, ис­поль­зо­вав­шим­ся для вы­пол­не­ния за­про­са. Этот объ­ект XMLHttp­Request, ес­ли име­ет­ся, так­же яв­ля­ет­ся воз­вра­щае­мым зна­че­ни­ем функ­ции jQuery.get().

    * `url` - путь запроса

    * `data` - передаваемые данные

    * `f(data, status, xhr)` - обработчик успешного выполнения

    * `type` - тип получаемых данных, "xml", "script", "json", "jsonp", "text"

    .. code-block:: js        
            
        $.get(
            "serverscript.php",
            {
                data: "content", 
                data2: "content2"
            },
            function(data, textStatus){
                ...
            },
            "html"
        );


.. js:function:: jQuery.load(url [,data [,f(text,status,xhr)]])

    От­прав­ля­ет асин­хрон­ный за­прос по ад­ре­су url, до­бав­ляя лю­бые дан­ные data. При по­лу­че­нии от­ве­та ин­тер­пре­ти­ру­ет его как стро­ку с раз­мет­кой HTML и встав­ля­ет ее в  ка­ж­дый вы­бран­ный эле­мент, за­ме­щая лю­бое имею­щее­ся со­дер­жи­мое. В  за­клю­че­ние вы­зы­ва­ет f как ме­тод для ка­ж­до­го вы­бран­но­го эле­мен­та, пе­ре­да­вая функ­ции f текст от­ве­та, код со­стоя­ния и объ­ект XMLHttpRequest, ис­поль­зо­вав­ший­ся для вы­пол­не­ния за­про­са.

    Ес­ли зна­че­ние url вклю­ча­ет про­бел, лю­бой текст по­сле про­бе­ла ис­поль­зу­ет­ся как се­лек­тор и в вы­бран­ные эле­мен­ты встав­ля­ет­ся толь­ко часть до­ку­мен­та в от­ве­те, ко­то­рая со­от­вет­ст­ву­ет се­лек­то­ру.
    
    В  от­ли­чие от боль­шин­ст­ва функ­ций под­держ­ки ар­хи­тек­ту­ры Ajax в  биб­лио­те­ке jQuery, load() яв­ля­ет­ся ме­то­дом, а  не функ­ци­ей. По­доб­но боль­шин­ст­ву ме­то­дов объ­ек­та jQuery, воз­вра­ща­ет объ­ект jQuery, от­но­си­тель­но ко­то­ро­го этот ме­тод был вы­зван.

    .. code-block:: js
        
        // загружает HTML код в необходимый DOM элемент на странице
        $("#content").load(
            "serverscript.php",       
            {
                data: "content"
            },       
            function(responseText, textStatus, XMLHttpRequest){
                ...
            }
        );


.. js:function:: jQuery.post(url [,data [,f(data,status,xhr) [,type]]])
    
    Дей­ст­ву­ет по­доб­но функ­ции jQuery.get(), но вы­пол­ня­ет не GET-за­прос, а HTTP POST-за­прос.

    * `url` - путь запроса

    * `data` - передаваемые данные

    * `f(data, status, xhr)` - обработчик успешного выполнения

    * `type` - тип получаемых данных, "xml", "script", "json", "jsonp", "text"

    .. code-block:: js
        
        $.post(
            "serverscript.php",
            {
                data: "content", 
                data2: "content2"
            },
            function(data, textStatus){
                ...
            },
            "html"
        );


.. js:function:: jQuery.param(o, [old=false]):string
    
    Се­риа­ли­зу­ет име­на и зна­че­ния свойств объ­ек­та o в фор­мат «www-form-urlencoded», при­год­ный для до­бав­ле­ния в URL-ад­рес или для пе­ре­да­чи в те­ле HTTP POST-за­про­са. Боль­шин­ст­во функ­ций под­держ­ки Ajax в биб­лио­те­ке jQuery де­ла­ют это ав­то­ма­ти­че­ски, ес­ли по­лу­ча­ют объ­ект в па­ра­мет­ре data. Ес­ли тре­бу­ет­ся вы­пол­нить по­верх­но­ст­ную се­риа­ли­за­цию объ­ек­та в сти­ле вер­сии jQuery 1.3, во вто­ром ар­гу­мен­те сле­ду­ет пе­ре­дать зна­че­ние true.


.. js:function:: jQuery.parseJSON(text):object
    
    Вы­пол­ня­ет син­так­си­че­ский раз­бор тек­ста в фор­ма­те JSON и воз­вра­ща­ет по­лу­чен­ный объ­ект. Функ­ции под­держ­ки ар­хи­тек­ту­ры Ajax в биб­лио­те­ке jQuery ис­поль­зу­ют эту функ­цию при за­про­се дан­ных в фор­ма­те JSON.


Параметры запроса
-----------------

============= =======
параметр      описание
============= =======
async         асинхронность запроса, по умолчанию true
beforeSend    обработчик, выполняемые перед отправкой
cache         вкл/выкл кэширование данных браузером, по умолчанию true
complete      обработчик запроса, выполнится в конце в любом случаем
contentType   по умолчанию «application/x-www-form-urlencoded»
data          передаваемые данные — строка иль объект
dataFilter    фильтр для входных данных
dataType      тип данных возвращаемых в callback функцию (xml, html, script, json, text, _default)
error         обработчик не успешного запроса
global        тригер — отвечает за использование глобальных AJAX Event'ов, по умолчанию true
ifModified    тригер — проверяет были ли изменения в ответе сервера, дабы не слать еще запрос, по умолчанию false
jsonp         переустановить имя callback функции для работы с JSONP (по умолчанию генерируется на лету)
processData   по умолчанию отправляемые данный заворачиваются в объект, и отправляются как «application/x-www-form-urlencoded», если надо иначе — отключаем
scriptCharset кодировочка — актуально для JSONP и подгрузки JavaScript'ов
success       обработчик успешного запроса
timeout       время таймаут в миллисекундах
type          GET либо POST
url           url запрашиваемого скрипта
============= =======

События запросов
----------------

============= =======
параметр      описание
============= =======
ajaxError     Срабатывает в случае ошибки
ajaxSuccess   Срабатывает по возвращению ответа, аналогично success
ajaxComplete  Глобальное событие, аналогичное complete
ajaxSend      Срабатывает до отправки запроса, аналогично beforeSend
ajaxStart     Данный метод вызывается в случае когда побежал AJAX запрос, и при этом других запросов нету
ajaxStop      Данный метод вызывается в случае когда больше нету активных запросов
============= =======

.. code-block:: js

    $("#content").ajaxSuccess(function(event, request, settings){
        alert("AJAX event");
    });