function - функция
==================

Стандартные функции
-------------------


.. py:method:: any(iter)

    Возвращает True если хотя бы один из объектов интерируемого объекта True.


.. py:method:: all(iter)

    Возвращает True если все элементы интерируемого объекта True.


.. py:method:: compile(string, filename, kind [, flags=0 [, dont_inherit]])

    Компилирует строку в байт-код.

    :param string: строка
    :param filename: файл, в котором эта строка определена
    :param kind: тип компилируемого кода
    :var kind: 'single' – для единственной инструкции, 'exec' – для множества инструкций и 'eval' – для выражений.
    :param flags: определяет, какие дополнительные особенности (включенные в модуль __future__) должны быть активированы. Эти особенности перечисляются в виде флагов, объявленных в модуле __future__, с помощью побитовой операции ИЛИ. 
    :var flags: __future__.division.compiler_flag. 
    :param dont_inherit: если установлен, активируются только особенности, перечисленные в аргументе flags, – особенности, действующие в текущей версии, игнорируются.

.. py:method:: delattr(obj, attr)

    удаляет атрибут из объекта
    
.. py:method:: dir([obj])

    Возвращает список, содержащий глобальные свойства и методы, иначе возвращает свойства и методы аргумента.
    
    >>> dir()
    >>> ['__builtins__', '__doc__', '__name__', '__package__']
    >>> import os
    >>> dir(os)
    [...'read', 'remove', 'removedirs', ...]


.. py:method:: enumerate(iter[, initial_value)

    Возвращает объект итератор, который воспроизводит последовательность кортежей, содержащих порядковый номер итерации и значение, полученное от объекта iter. 

    >>> a = enumerate((1, 2))
    >>> next(a)
    (0, 1)
    >>> next(a)
    (1, 2)
    >>> next(a)
    Traceback (most receпt са11 1ast):
        File "<pyshe11#10>", 1iпе 1, iп <modu1e>
            next(obj)
    Stopiteratioп
    >>> for i in enumerate((1, 2))
            print i
    (0, 1)
    (1, 2)
    

.. py:method:: eval(x, [globals, locals])
    
    Преобразует строковый объект, в объект питона, а также выполняет выражение аргумента
    
    >>> eval('[1, 2, 3, 4]')    
    [1, 2, 3, 4]

.. py:method:: exec(x, [globals, locals])

    Выполняет выражение аргумента


.. py:method:: filter(func, iter)
    
    :param func: функция, обработчик 
    :param iter: обрабатываемый объект
    :type iter: iter
    
    Возвращает список, состоящий из тех элементов объекта, для которых обработчик является истинной

    .. versionchanged:: 3.x

        возвращает объект генератор

    >>> def func(x):
            for y in xrange(2, x):
                if x%y == 0:
                    return 0
                else:
                    return 1
    >>> filter(func, xrange(2, 40))
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]
    >>> filter(None, [1, 0, [], None, 2])
    [1, 2]


.. py:method:: getattr(obj, attr [, default])
    
    Возвращает значение атрибута объекта

.. py:method:: globals()

    Возвращает словарь текущего модуля, который представляет глобальное пространство имен. При вызове из функции или метода возвращает глобальное пространство имен для модуля, в котором была определена эта функция или метод.

.. py:method:: hasattr(object, name)

    Возвращает True, аргумент name является именем атрибута объекта object. В противном случае возвращается значение False. Аргумент name должен быть строкой.

.. py:method:: hash(object)

    Возвращает целочисленное значение хеша для объекта object (если это возможно). Значения хешей в первую очередь используются в реализациях словарей, множеств и других объектов отображений. Два объекта, которые признаются равными, имеют одинаковые значения хешей. Изменяемые объекты не поддерживают возможность вычисления хеша, однако пользовательские объекты могут определять метод __hash__(), чтобы обеспечить поддержку этой операции.


.. py:method:: help([object])

    Обращается к справочной системе во время интерактивных сеансов. Аргумент object может быть строкой с именем модуля, класса, функции, метода, с ключевым словом или названием раздела в документации. Если передается объект какого-либо другого типа, будет воспроизведена справочная информация для этого объекта. При вызове без аргумента будет запущен инструмент предоставления интерактивной справки с дополнительной информацией.


.. py:method:: id(obj) 
    
    Возврващает число, уникальный идентификатор объекта


.. py:method:: input([message]) 
    
    :param str message: строка, которая выведется в stdout

    Возврващает число, полученное со stdin.
    
    .. versionchanged:: 3.x
        
        с 3 версии возвращает строку

    >>> x = input(u'Введите число\n')    
    Введите число
    1
    >>> х
    1


.. py:method:: isinstance(obj, type)
    
    Возвращает True | False, если типом объекта является сравниваемый тип.
    
    >>> isinstance(1, int)
    1
    >>> isinstance(1, str)
    0

.. py:method:: issubclass(obj, type)
    
    Возвращает True | False, если объект является подклассом типа.
    
.. py:method:: iter(object [,sentinel])

    Возвращает итератор, воспроизводящий элементы объекта object. Если аргумент sentinel опущен, объект object должен реализовать либо метод __iter__(), который создает итератор, либо метод __getitem__(), который принимает целочисленные аргументы со значениями, начиная с 0. При наличии аргумента sentinel аргумент object интерпретируется иначе. В этом случае объект object должен быть вызываемым объектом, не принимающим аргументов. Возвращаемый им итератор будет вызываться этой функцией в цикле до тех пор, пока он не вернет значение, равное значению аргумента sentinel, после чего итерации будут остановлены. Если объект object не поддерживает итерации, будет возбуждено исключение TypeError.


.. py:method:: len(object)
    
    Возвращает число, длину оъекта
    
    >>> len('ilnurgi')
    7


.. py:method:: locals()
    
    Возвращает словарь, представляющий текущую локальную таблицу символов
    
    >>> locals()
    {'__builtins__': , '__package__': None, 'i': 'ilnur', '__name__': '__main__', '__doc__': None}


.. py:method:: map(func, iter1 [ , iter2, ...])
    
    :param func: функция, обработчик 
    :param iter: итерируемый объект
    
    применяет функцию к каждому элементу последовательности и возвращает список результатов. можно передать несколько последовательностей, то в функцию будет передаваться сразу несколько элементов, рсположенных в последовательностях на одинаковом смещении. Если количество элементов в nоследовательностях будет разным, то в качестве ограничения выбирается nоследовательность с минимальным количеством элементов.

    .. versionchanged:: 3.Х

        возвращает объект генератор

    >>> map(unicode, 'qw')
    [u'q', u'w']


.. py:method:: max(iter)
    
    Возвращает максимальный элемент итерирумого объекта
    
    >>> max([0, 6, 1])
    6


.. py:method:: min(iter)
    
    Возвращает минимальный элемент итерируемого бъекта
    
    >>> min('ilnurgi')
    'i'


.. py:method:: next(s [, default])

    Возвращает следующий элемент итератора s. После того как все элементы итератора будут исчерпаны, возбуждает исключение StopIteration, если не указано значение по умолчанию в аргументе default. В противном случае возвращается значение по умолчанию. 


.. py:method:: print(args [, sep=' ', end='\n', file=sys.stdout])
    
    :param args: объекты для вывода
    :param str sep: разделитель объектов
    :param str end: окончание строки вывода
    :param file file: объект, куда выводятся данные

    Вывод последовательности значений в файловый объект

    .. versionchanged:: 3.Х

        начиная с 3 версии питона, print стала функцией

    ::

        print ('1', '2')



.. py:method:: property([fget [,fset [,fdel [,doc]]]])

    :param func fget: функция, возвращающая значение атрибута
    :param func fset: устанавливает новое значение атрибута
    :param func fdel: удаляет атрибут
    :param str doc: документация
    
    Создает атрибут-свойство класса

    ::

        class MyClass:

            def init (self, value):
                self.var = value

            @property
            def v(self):
                return self.var

            @v.setter
            def v(self, value):
                self.var = value

            @v.deleter
            def v(self):
                del self.var


.. py:method:: range([A=0, ] B[,C=1]])
    
    :param А: начало
    :param В: конечная позиция
    :param С: шаг 
    
    Возвращает сгенерированный список.

    .. versionchanged:: 3.x
        
        с 3 версии возвращает генератор

        >>> a = range(3)

        >>> a 
        range(0, 3)

        >>> a[0], a[1], a[2]
        0, 1, 2

        >>> a[0:2]
        range(0, 2)

        >>> 1 in a
        True

        >>> a.index(1) # возвращает индекс искомого объекта, возбуждает исключение ValueError
        0

        >>> a.count(1) # возвращает количесвто элементов
        1
    
    >>> range(3)
    [0, 1, 2]
    >>> range(1, 5, 2)
    [1, 3]


.. py:method:: raw_input([comment]) 
    
    Возврващает строку, полученную со stdin.

    >>> x = raw_input('Введите текст\n')
    Введите текст
    ilnurgi.ru
    >>> х
    'ilnurgi.ru'


.. py:method:: reduce(function, items [, initial])

    :param function: функция обработчик, принимает два параметра: накопленное и текущее значение
    :param items: итерируемый объект
    :param initial: начальное значение
    
    Применяет функцию к парам элементов в итерируемом объекте и возвращает единственное накопленное значение. Функция должна принимать два аргумента, накопленное и текущее значение.


.. py:method:: repr(x)
    
    Возвращает строковый объект аргумента.

    >>> repr([1, 2, 3, 4])
    '[1, 2, 3, 4]'


.. py:method:: reversed()

    Создает итератор для обхода последовательности s в обратном порядке.

.. py:method:: setattr(object, name, value)

    Создает в объекте object атрибут name и записывает в него значение value. Аргумент name должен быть строкой. Выполняет ту же операцию, что и инструкция object.name = value.


.. py:method:: sorted(list [, key, reverse])

    :param list: итерируемый объект 
    :param key: параметр для сортировки 
    :param reverse: True | False обратный порядок 

    Возвращает список, отсортированный

    >>> sorted(['567', '34566','1'], key=len)
    ['1', '567', '34566']

.. py:method:: staticmethod(func)

    Создает статический метод класса. Эта функция неявно вызывается декоратором @staticmethod.


.. py:method:: sum(iter [, initial=0])

    :parma iter: последовательность
    :param initial: начальное значение

    Возвращает число, сумму элементов последовательности

    >>> sum((10, 20, 30, 40)), sum((10, 20, 30, 40), 2)
    100, 102


.. py:method:: super(type [, object])

    Возвращает объект, представляющий суперклассы типа type. Чаще всего возвращаемый объект используется для вызова методов базового класса.

    ::
    
        class B(A):
            def foo(self):
                super(B,self).foo()

.. py:method:: type(a)

    Возвращает строку, тип аргумента 
    
    >>> type(5)
    'int'

.. py:method:: type(name, bases, dict)

    Создает новый объект type (как как при объявлении нового класса). В аргументе name передается имя типа, в аргументе bases – кортеж базовых классов, а в аргументе dict – словарь, содержащий определения, соответствующие телу класса. Чаще всего эта функция используется при работе с метаклассами. 

.. py:method:: xrange(A [,B,[C]])
    
    :param А: количество элементов или начальная позиция 
    :param В: конечная позиция 
    :param С: шаг 

    Возвращает объект генератор.

    >>> a = xrange(3)
    >>> for i in a:
            print i
    # 0
    # 1


.. py:method:: unicode(object)

    возвращает юникод строку, преобразованный из аргумента


.. py:method:: vars([obj])

    возвращает идентификаторы

    * если вызывается без параметра внутри функции, то возвращается словарь с локальными идентификаторами
    * если вызывается без параметра вне функции, то возвращается словарь сс глобальными идентификаторами
    * при указании объекта, возвращается инденификаторы объекта (obj.__dict__)


.. py:method:: zip(<Последовательность1>, <Последовательность2>, ...)

    возвращает список кортежей, содержащий элемент последовательностей, которые расположены на одинаковом смещении. Если количество элементов в nоследовательностях будет разным, то в результат nоnадут только элементы, которые существуют во всех nоследовательностях на одинаковом смеше­нии.

    .. versionchanged:: 3.x

        возвращает объект генератор

    >>> zip((1,2,3), (4,5,6), (7,8,9))
    [(1,4,7), (2,5,8), (3,6,9)]


Атрибуты встроенных функции

========== ========
атрибут    описание
========== ========
b.__doc__  Строка документирования
b.__name__ Имя функции/метода
b.__self__ Ссылка на экземпляр, ассоциированный с данным методом (для связанных методов)
========== ========

lambda функции
--------------
>>> f = lambda x: x*2
>>> for i in (1,2):
        print f(i)
2
4

Пользовательски функции
-----------------------

>>> def func(X):
        print X
>>> func('http://ilnurgi.ru')
http://ilnurgi.ru

Атрибуты функции

============== ========
атрибут        описание
============== ========
f.__closure__  Кортеж, содержащий данные, связанные с вложенными областями видимости
f.__code__     Скомпилированный байт-код функции
f.__defaults__ Кортеж с аргументами по умолчанию
f.__dict__     Словарь, содержащий атрибуты функции
f.__doc__      Строка документирования
f.__globals__  Словарь, определяющий глобальное пространство имен
f.__name__     Имя функции
============== ========


Декораторы
----------

Это функция, в качестве аргумента принимает функцию или класс

.. code-block:: py

    def prepare(func):
        def wrapp():
            print 1
            func()
            print 3
        return wrapp
    @prepare
    def func():
        print 2
    func()
    # 1
    # 2
    # 3

    def deco(С):
        print("Bнyтpи декоратора")
        return С

    @deco
    class MyClass:
        def init (self, value):
            self.v = value

Генераторы
----------

С помощью инструкции yield, функция может генерировать целые последовательности результатов,
тогда такие функции называют генераторами

.. code-block:: py

    def countdown(n):
        print u'Обратный отсчет!'
        while n > 0:
            yield n
            n -= 1

    c = countdown(3)
    c.next()
    # Обратный отсчет
    # 3
    c.next()
    # 2
    c.next()
    # 1

.. py:attribute:: gen.gi_code

    Объект с программным кодом функции-генератора

.. py:attribute:: gen.gi_frame

    Кадр стека функции-генератора

.. py:attribute:: gen.gi_running

    Целое число, указывающее – выполняется ли функция-генератор в настоящий момент

.. py:method:: gen.next()

    Выполняет функцию-генератор, пока не будет встречена следующая инструкция yield, и возвращает полученное значение
    (в Python 3 этот метод вызывает метод __next__())

.. py:method:: gen.send(value)

    Передает значение value генератору. Это значение возвращается выражением yield в функции-генераторе.
    После этого функция-генератор продолжит выполнение, пока не будет встречена следующая инструкция yield.
    Метод send() возвращает значение, полученное от этой инструкции yield

.. py:method:: gen.close()

    Закрывает генератор, возбуждая исключение GeneratorExit в функции-генераторе.
    Этот метод вызывается автоматически, когда объект генератора уничтожается сборщиком мусора

.. py:method:: gen.throw(exc [,exc_value [,exc_tb ]])

    Возбуждает исключение в функции-генераторе в точке вызова инструкции yield.

    :param exc: тип исключения
    :param exc_value: значение исключения
    :param exc_tb: необязательный объект с трассировочной информацией. Если исключение перехвачено и обработано, вернет значение, переданное следующей инструкции yield


Сопрограммы
-----------

Функция обрабатывающая последовательность входных параметров.

.. code-block:: py

    def print_matches(matchtext):
        print 'Поиск подстроки', matchtext
        while True:
            # Получение текстовой строки
            line = (yield)
            if matchtext in line:
                print line

    matcher = print_matches('python')

    # Перемещение до первой инструкции (yield)
    matcher.next()
    # Поиск подстроки python

    matcher.send(“Hello World”)
    matcher.send(“python is cool”)
    # python is cool
    matcher.send(“yow!”)

    # Завершение работы с объектом matcher
    matcher.close()

Аннтоации в функциях:
---------------------

.. versionadded:: 3.x

>>> def func(a: 'Параметр', b: 10 + 5 = 3) -> None:
       pass

Функция возвращает `None`, для параметров `a` и `b` заданы описания и для `b` задано значение по умолчанию. После создания функции все выражения будут выполнены и результаты сохранятся в виде словаря в атрибуте `__annotations__` объекта функции.
