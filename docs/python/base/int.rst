int - числа
===========

    >>> 5+5
    10

    >>> 10-5
    5

    >>> 5*5
    25

    >>> 10/5
    2

    >>> 10%2
    0

    >>> 10%3
    1

    >>> 10**3
    1000
    
    >>> a = 0
    >>> a += 3
    3
    >>> a -= 1
    2
    >>> a *= 10
    20
    >>> a /= 2
    10
    >>> a %= 4
    2
    >>> a **= 2
    4    
    >>> a &= 1
    # аналогичен a = a & 1
    >>> a |= 1
    # аналогичен a = a | 1
    >>>  a ^= 1
    # аналогичен a = a ^ 1
    >>> a >>= 1
    # аналогичен a = a >> 1
    >>> a <<= 1
    # аналогичен a = a << 1

    >>> 0b101101 # двоичное число
    45

    >>> 0o12 # восьмиречное число
    10

    >>> 0xA # шестнадцатеричное число
    10


Функции работы с числами
------------------------


.. py:method:: abs(x)
    
    Возвращает число, абсолютное значение
    
    >>> abs(-3)
    3


.. py:method:: bin(x)

    :param int x: десятичное число

    Возвращает строку, преобразованное из аргумента

    >>> bin(255), bin(1), bin(-45)
    '0b11111111', '0b1', '-0b101101'


.. py:method:: cmp(x, y)
    
    Возвращает: -1 если X < Y, 0 если X = Y, 1 если X > Y
    
    >>> cmp(2,1)
    1

.. py:method:: chr(x)

    Преобразует число в символ
    
    >>> chr(65)
    'a'


.. py:method:: divmod(x, y)
    
    Возвращает кортеж, целое и остаток от деления Х на У
    
    >>> divmod(10, 3)
    (3, 1)


.. py:method:: hex(x)    
    
    :param int x: десятичное число

    Возвращает строку, шестнадцатиричное представление аргумента.
    
    >>> hex(16)
    '0х10'


.. py:function:: int(obj [, a=10])

    :param obj: объект
    :param int a: система исчисления (10, 8, 16)
    :raises ValueError: если преобразование не возможно
    
    Возвращает число, преобразованное из аргумента

    >>> int('1')
    1
    >>> int ("71s")
    Traceback (most recent са11 1ast):
      File "<pyshell#9>", line 1, in <modu1e>
        int ("71s")
    Va1ueError: inva1id 1itera1 for int() with base 10: '71s'


.. py:method:: oct(x)
    
    :param int x: десятичное число

    Возвращает строку, восьмеричное представление аргумента
    
    >>> oct(16)
    '0o20'


.. py:method:: ord(a)

    Преобразует символ в число


.. py:method:: pow(x, y [, z])
    
    :param x: число
    :param y: степень
    :param z: остаток от деления

    Возвращает число, возведенное в степень
    
    >>> pow(2, 3)
    8

    >>> pow(10, 2, 2) # (10 ** 2)%2
    0


.. py:method:: round(x [, y=0])

    :param x: аргумент
    :type x: int, float
    :param int y: количество знаков после заяптой

    Возвращает вещественное число, полученное в результате округления аргумента
    
    >>> round(2, 2), round(0.49)
    2.0, 0


.. py:method:: unichr(x)

    Преобразует число в юникод символ


Битовые операции
----------------

    # Битовое ИЛИ чисел x и y
    >>> x = 100   # 01100100
    >>> y = 75    # 01001011
    >>> x | y     # 01101111

    # Битовое исключающее ИЛИ чисел x и y
    >>> x = 100   # 01100100
    >>> y = 250   # 11111010
    >>> x ^ y     # 10011110

    # Битовое И чисел x и y
    >>> x = 100   # 01100100
    >>> y = 75    # 01001011
    >>> x & y     # 01000000

    # Число, полученное на основе x, биты которого сдвинуты на n влево. 
    # Эквивалентно умножению числа x на двойку в степени n, (x * (2 ** n).
    # Отличается очень высокой скоростью выполнения по сравнению с обычным умножением    
    >>> x = 100   # 01100100
    >>> x << 1    # 11001000
    >>> x << 2    # 10010000
    >>> x = -127  # 10000001
    >>> x << 1    # 

    # Число, полученное на основе x, биты которого сдвинуты на n вправо. 
    # Эквивалентно делению числа x на двойку в степени n, (x / (2 ** n)). 
    # Отличается очень высокой скоростью выполнения по сравнению с обычным делением
    # если число отрицательное, разряды слева заполняются 1
    >>> x = 100   # 01100100
    >>> x >> 1    # 00110010
    >>> x >> 2    # 00011001
    >>> x = -127  # 10000001
    >>> x >> 2    # 11100000

    # Число, полученное на основе x, все биты которого инвертированы.
    >>> x = 100   # 01100100
    >>> ~x        # 10011011
