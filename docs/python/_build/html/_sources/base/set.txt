set - множества
===============

Множества используются для хранения неупорядоченных коллекций уникальных объектов. Множество может содержать только элементы неизменяемых типов, например числа, строки, кортежи.

>>> set([1,1,1,1,2])
set(1, 2)
>>> set('abc')
set('a', 'b', 'c')
>>> {1,2,3}
set(1,2,3)


.. py:class:: set

    множества 

    .. py:method:: add(obj)

        Добавляет новый объект в множество


    .. py:method:: clear()

        Очищает множество


    .. py:method:: copy()

        Возвращает копию объекта


    .. py:method:: difference(<Множество>)

        Возвращает множество, разницу между множествами

        >>> {1,2,3} - {1,2,4}
        {3}
        >>> {1,2,3}.difference(set([1,2,4]))
        {3}


    .. py:method:: difference_update(<Множество>)

        Удаляет элементы множества, которые присутствуют в обоих множествах

        >>> s = {1,2,3}
        >>> s.difference_update(set([1,2,4]))
        >>> s
        {3}
        >>> s -= set([3,4,5])
        >>> s
        {}


    .. py:method:: discard(obj)

        Удаляет объект из множества.


    .. py:method:: intersection(<Множество>)

        Возвращает пересечение множеств, элементы которые существуют в обоих множествах

        >>> {1,2,3}.intersection({1,2,4})
        {1,2}
        >>> set([1,2,3]) & set([1,2,4])
        {1,2}


    .. py:method:: intersection_update(<Множество>)

        В исходном множестве останутся только множества, которые есть в обоих множествах

        >>> s = {1,2,3}
        >>> s.intersection_update(set([1,2,4]))
        >>> s
        {1,2}
        >>> s &= {1,6,7}
        >>> s
        {1}


    .. py:method:: isdisjoint(<Множество>)

        проверяет результат пересечения множеств, и если оно пустое (не имеют одинаковых элементов), возвращает True, иначе False

        >>> {1,2,3}.isdisjoint({4,5,6})
        True
        >>> {1,2,3}.isdisjoint({4,5,1})
        False


    .. py:method:: issubset(<Множество>)

        проверяет, входит ли исходное множество в указанное

        >>> s = {1,2,3}
        >>> s.issubset(set([1,2,3,4]))
        True
        >>> {1,2,3} <= {1,2,3}, {1,2,3} <= {1,2,3,4}
        True, True
        >>> {1,2,3} < {1,2,3}, {1,2,3} < {1,2,3,4}
        False, True


    .. py:method:: issuperset(<Множество>)

        проверяет, входит ли указанное множество в исходное множество

        >>> s = {1,2,3}
        >>> s.issuperset(set([1,2]))
        True
        >>> {1,2,3} >= {1,2}, {1,2,3} >= {1,2,3}
        True, True
        >>> {1,2,3} > {1,2}, {1,2,3} > {1,2,3}
        True, False


    .. py:method:: pop()

        Возвращает произвольный объект множества, удалив его из множества


    .. py:method:: remove(obj)

        Удаляет объект из множества


    .. py:method:: symmetric_difference(<Множество>)

        возвращает множество, которое не содержит одинаковых элементов

        >>> s = {1,2,3}
        >>> s.symmetric_difference(set([1,2,4]))
        {3, 4}
        >>> {1,2,3}  ^ {1,2,4}
        {3, 4}


    .. py:method:: symmetric_difference_update(<Множество>)

        оставляет в исходном множестве все элементы, кроме одинаковых

        >>> s = {1,2,3}
        >>> s.symmetric_difference_update(set([1,2,4]))
        >>> s
        {3, 4}
        >>> {1,2,3} ^= {1,2,4}
        {3, 4}


    .. py:method:: union(<Множество>)

        Возвращает новое множество, объединенное из двух.

        >>> s = {1, 2, 3}
        >>> s.union(set([4,5,6]))
        {1,2,3,4,5,6}
        >>> s | set([4,5,6])
        {1,2,3,4,5,6}


    .. py:method:: update(<Множество>)

        Добавляет в множество новое множество

        >>> s = {1,2,3}
        >>> s.update(set([4,5,6]))
        >>> s
        {1,2,3,4,5,6}
        >>> s |= {7, 8, 9}
        >>> s
        {1,2,3,4,5,6,7,8,9}

    .. py:method:: remove(obj)



Генератор множеств
------------------

.. versionadded:: 3.x

>>> { i for i in [1,2,3,1]}
{1,2,3}