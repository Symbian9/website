file - файлы
============

Функции для работы с файлами
----------------------------

.. py:method:: open(path [, mode='r' [, buffering=-1 [, encoding=None [, errors=None [, newline=None [, closefd=True]]]]]]))

    :param str path: путь к открываемому файлу
    :param str mode: режим работы, r,w,a, (t, b)
    :param int buffering: определяет размер буферизации
    :param str encoding: кодировка файла
    :param str errors: политику обработки ошибок кодирования символов и может иметь одно из следующих значений: 'strict', 'ignore', 'replace', 'backslashreplace' или 'xmlcharrefreplace'.
    :param str newline: определяет поведение режима поддержки универсального символа перевода строки и может иметь значение None, '', '\n', '\r' или '\r\n'.
    :param bool closefd: логический флаг, который определяет, должен ли фактически закрываться дескриптор файла при вызове метода close().
    
        * w - запись, содержимое исчезает        
        * r - чтение
        * a - добавление/запись файла, содержимое не изменяется
        * r+ - чтение/запись, содержимое не меняется
        * w+ - запись, содержимое исчезает
        * r+b - чтение/запись двоичного содержимого, содержимое сохраняется
        * w+b - чтение/запись двоичного содержимого, содержимое удаляется
        * rb - чтение двоичного файла
        * wr - запись двоичного файла, содержимое исчезает   

    Возвращает файловый объект.

    >>> f = open('ilnurgi.txt')
    >>> type(f)
    type 'file'

Методы файловых объектов
------------------------

.. py:method:: file.close()
    
    Закрывает файловый объект
    
    >>> f.close()


.. py:method:: file.fileno()

    Возвращает целочисленный дескриптор файла


.. py:method:: file.flush()

    Выталкивает буферы вывода


.. py:method:: file.isatty()

    Интерактивный терминал


.. py:method:: file.read([n])    
    
    :param int n: количество читаемых байтов

    Возвращает строку, прочитанные данные из файла.

    >>> f.read()
    '123'


.. py:method:: file.readline([n])

    :param int n: количество читаемых байтов

    Возвращает строку, прочитанную из файла построчно.


.. py:method:: file.readlines([n])
    
    Возвращает список, строки из файла

    :param int n: количество читаемых байтов

    >>> f.readlines()
    ['1', '2']

.. py:method:: file.seek(offset, [whence])

    :param int offset: позиция чтения
    :param int whence: относительно чего отсчитывается начальная позиция
        
        * io.SEEK_SET или 0 - новое положение отсчитывается от начала файла;
        * io.SEEK_CUR или 1 - от конца файла;
        * io.SEEK_END или 2 - от текущего положения в файле;

    Перемещает курсор в файле на определенную позицию

.. py:method:: file.tell()

    Возвращает текущее положение в файле в байтах от начала файла.

.. py:method:: file.truncate(size)
    
    :param size: усекаемый размер 
    :type size: int
    
    Усекает файл до заданного размера

.. py:method:: file.write(str)
    
    Записывает в файл строку

    >>> f.write('string')

.. py:method:: file.writelines(iter)

    Записывает в файл список строк

    >>> f.writelines('qwert')


.. py:attribute:: file.closed

    Состояние файла, закрыт, открыт


.. py:attribute:: file.mode

    Режим ввода-вывода


.. py:attribute:: file.softspace

    Логическое значение, сообщающее, должна ли инструкция print выводить пробел перед очередным значением.
    Классы, имитирующие файлы, должны предоставлять атрибут с этим именем, доступный для записи,
    инициализируемый нулем (только в Python 2).


.. py:attribute:: file.newlines

    Когда файл открывается в режиме поддержки универсального символа перевода строки, этот атрибут будет содержать
    представление символа окончания строки, фактически используемого в файле.
    Значением атрибута может быть None, которое говорит о том, что никаких символов завершения строки не было
    встречено; строка, содержащая ‘\n’, ‘\r’ или ‘\r\n’, или кортеж со всеми встреченными символами завершения строки.


.. py:attribute:: file.encoding

    Строка с названием кодировки файла, если определена (например, 'latin-1' или 'utf-8').
    Если кодировка не используется, этот атрибут имеет значение None.


.. py:attribute:: file.name 
    
    название файла


.. py:attribute:: file.buffer

    буфер файлового объекта

    >>> f = open(r"file.txt", "w", encoding="cp1251")
    >>> f.buffer.write(bytes("Cтpoкa", "ср1251"))
    6
    >>> f.close()

