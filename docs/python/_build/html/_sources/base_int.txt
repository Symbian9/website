Числа
======================

    >>> 5+5
    10

    >>> 10-5
    5

    >>> 5*5
    25

    >>> 10/5
    2

    >>> 10%2
    0

    >>> 10%3
    1

    >>> 10**3
    1000
    
    >>> a = 0
    >>> a += 3
    3
    >>> a -= 1
    2
    >>> a *= 10
    20
    >>> a /= 2
    10
    >>> a %= 4
    2
    >>> a **= 2
    4    
    >>> a &= 1
    # аналогичен a = a & 1
    >>> a |= 1
    # аналогичен a = a | 1
    >>>  a ^= 1
    # аналогичен a = a ^ 1
    >>> a >>= 1
    # аналогичен a = a >> 1
    >>> a <<= 1
    # аналогичен a = a << 1

Методы
------

.. py:method:: abs(x)
    
    Возвращает число, абсолютное значение
    
    >>> abs(-3)
    3

.. py:method:: cmp(x, y)
    
    Возвращает: -1 если X < Y, 0 если X = Y, 1 если X > Y
    
    >>> cmp(2,1)
    1

.. py:method:: divmod(x, y)
    
    Возвращает кортеж, целое и остаток от деления Х на У
    
    >>> divmod(10,3)
    (3,1)

.. py:method:: hex(a)    
    
    Возвращает строку, шестнадцатиричное представление аргумента.
    
    >>> hex(16)
    '0х10'

.. py:method:: oct(a)
    
    Возвращает строку, восьмеричное представление аргумента
    
    >>> oct(16)
    '020'

.. py:method:: pow(x, y)
    
    Возвращает число, x в степени y.
    
    >>> pow(2,3)
    8

.. py:method:: rownd(x [, y])

    Возвращает вещественное число, полученное в результате округления числа X до Y знаков после точки.
    
    >>> rownd(2)
    2

Битовые операции
----------------

Битовое ИЛИ чисел x и y

>>> x | y

Битовое исключающее ИЛИ чисел x и y


>>> x ^ y

Битовое И чисел x и y

>>> x & y

Число, полученное на основе x, биты которого сдвинуты на n влево. Эквивалентно умножению числа x на двойку в степени n (x * 2 ** n). Отличается очень высокой скоростью выполнения по сравнению с обычным умножением

>>> x << n

Число, полученное на основе x, биты которого сдвинуты на n вправо. Эквивалентно делению числа x на двойку в степени n(x / 2 ** n). Отличается очень высокой скоростью выполнения по сравнению с обычным делением

>>> x >> n

Число, полученное на основе x, все биты которого инвертированы.

>>> ~x   